/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IpNftFactoryInterface extends ethers.utils.Interface {
  functions: {
    "IpNftContracts(address)": FunctionFragment;
    "_pushIP(string)": FunctionFragment;
    "fetchIpNftItems()": FunctionFragment;
    "fetchItemsCreated()": FunctionFragment;
    "fetchMyNFTs()": FunctionFragment;
    "getChildren()": FunctionFragment;
    "newIpNftItem(address,uint256,uint256,string,string,string)": FunctionFragment;
    "newIpNftLicense(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IpNftContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "_pushIP", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fetchIpNftItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChildren",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newIpNftItem",
    values: [string, BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newIpNftLicense",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "IpNftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_pushIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchIpNftItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newIpNftItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newIpNftLicense",
    data: BytesLike
  ): Result;

  events: {
    "IpNftItemCreated(uint256,address,uint256,address,address,uint256,string,string,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IpNftItemCreated"): EventFragment;
}

export class IpNftFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IpNftFactoryInterface;

  functions: {
    IpNftContracts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _pushIP(
      IpURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchIpNftItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          string,
          string,
          boolean
        ] & {
          itemId: BigNumber;
          IpNftContractAddress: string;
          tokenId: BigNumber;
          licensee: string;
          owner: string;
          licenseCost: BigNumber;
          IpBrandName: string;
          IpBrandSymbol: string;
          IpURI: string;
          sold: boolean;
        })[]
      ]
    >;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          string,
          string,
          boolean
        ] & {
          itemId: BigNumber;
          IpNftContractAddress: string;
          tokenId: BigNumber;
          licensee: string;
          owner: string;
          licenseCost: BigNumber;
          IpBrandName: string;
          IpBrandSymbol: string;
          IpURI: string;
          sold: boolean;
        })[]
      ]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          string,
          string,
          string,
          boolean
        ] & {
          itemId: BigNumber;
          IpNftContractAddress: string;
          tokenId: BigNumber;
          licensee: string;
          owner: string;
          licenseCost: BigNumber;
          IpBrandName: string;
          IpBrandSymbol: string;
          IpURI: string;
          sold: boolean;
        })[]
      ]
    >;

    getChildren(overrides?: CallOverrides): Promise<[string[]]>;

    newIpNftItem(
      IpNftContractAddress: string,
      tokenId: BigNumberish,
      licenseCost: BigNumberish,
      IpBrandName: string,
      IpBrandSymbol: string,
      IpURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newIpNftLicense(
      IpNftContractAddress: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IpNftContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _pushIP(
    IpURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchIpNftItems(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      string,
      boolean
    ] & {
      itemId: BigNumber;
      IpNftContractAddress: string;
      tokenId: BigNumber;
      licensee: string;
      owner: string;
      licenseCost: BigNumber;
      IpBrandName: string;
      IpBrandSymbol: string;
      IpURI: string;
      sold: boolean;
    })[]
  >;

  fetchItemsCreated(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      string,
      boolean
    ] & {
      itemId: BigNumber;
      IpNftContractAddress: string;
      tokenId: BigNumber;
      licensee: string;
      owner: string;
      licenseCost: BigNumber;
      IpBrandName: string;
      IpBrandSymbol: string;
      IpURI: string;
      sold: boolean;
    })[]
  >;

  fetchMyNFTs(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      string,
      string,
      boolean
    ] & {
      itemId: BigNumber;
      IpNftContractAddress: string;
      tokenId: BigNumber;
      licensee: string;
      owner: string;
      licenseCost: BigNumber;
      IpBrandName: string;
      IpBrandSymbol: string;
      IpURI: string;
      sold: boolean;
    })[]
  >;

  getChildren(overrides?: CallOverrides): Promise<string[]>;

  newIpNftItem(
    IpNftContractAddress: string,
    tokenId: BigNumberish,
    licenseCost: BigNumberish,
    IpBrandName: string,
    IpBrandSymbol: string,
    IpURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newIpNftLicense(
    IpNftContractAddress: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IpNftContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _pushIP(IpURI: string, overrides?: CallOverrides): Promise<void>;

    fetchIpNftItems(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ] & {
        itemId: BigNumber;
        IpNftContractAddress: string;
        tokenId: BigNumber;
        licensee: string;
        owner: string;
        licenseCost: BigNumber;
        IpBrandName: string;
        IpBrandSymbol: string;
        IpURI: string;
        sold: boolean;
      })[]
    >;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ] & {
        itemId: BigNumber;
        IpNftContractAddress: string;
        tokenId: BigNumber;
        licensee: string;
        owner: string;
        licenseCost: BigNumber;
        IpBrandName: string;
        IpBrandSymbol: string;
        IpURI: string;
        sold: boolean;
      })[]
    >;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ] & {
        itemId: BigNumber;
        IpNftContractAddress: string;
        tokenId: BigNumber;
        licensee: string;
        owner: string;
        licenseCost: BigNumber;
        IpBrandName: string;
        IpBrandSymbol: string;
        IpURI: string;
        sold: boolean;
      })[]
    >;

    getChildren(overrides?: CallOverrides): Promise<string[]>;

    newIpNftItem(
      IpNftContractAddress: string,
      tokenId: BigNumberish,
      licenseCost: BigNumberish,
      IpBrandName: string,
      IpBrandSymbol: string,
      IpURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newIpNftLicense(
      IpNftContractAddress: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IpNftItemCreated(
      itemId?: BigNumberish | null,
      IpNftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      licensee?: null,
      owner?: null,
      licenseCost?: null,
      IpBrandName?: null,
      IpBrandSymbol?: null,
      IpURI?: null,
      sold?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        boolean
      ],
      {
        itemId: BigNumber;
        IpNftContractAddress: string;
        tokenId: BigNumber;
        licensee: string;
        owner: string;
        licenseCost: BigNumber;
        IpBrandName: string;
        IpBrandSymbol: string;
        IpURI: string;
        sold: boolean;
      }
    >;
  };

  estimateGas: {
    IpNftContracts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _pushIP(
      IpURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchIpNftItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getChildren(overrides?: CallOverrides): Promise<BigNumber>;

    newIpNftItem(
      IpNftContractAddress: string,
      tokenId: BigNumberish,
      licenseCost: BigNumberish,
      IpBrandName: string,
      IpBrandSymbol: string,
      IpURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newIpNftLicense(
      IpNftContractAddress: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IpNftContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pushIP(
      IpURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchIpNftItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChildren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newIpNftItem(
      IpNftContractAddress: string,
      tokenId: BigNumberish,
      licenseCost: BigNumberish,
      IpBrandName: string,
      IpBrandSymbol: string,
      IpURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newIpNftLicense(
      IpNftContractAddress: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
