// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.8.4;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";

contract IpNft is Initializable, ERC721Upgradeable, ERC721URIStorageUpgradeable, PausableUpgradeable, AccessControlUpgradeable, ERC721BurnableUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;
    
    address public licensor;
    uint256 public licenseCost;
    string[] public IP;
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    
    CountersUpgradeable.Counter private _tokenIdCounter;

    function initialize(
        string memory IpBrandName, 
        string memory IpBrandSymbol,
        string memory IpURI
        ) initializer public {
        licenseCost = 10000000000000000;
        IP.push(IpURI);
        __ERC721_init(IpBrandName, IpBrandSymbol);
        __ERC721URIStorage_init();
        __Pausable_init();
        __AccessControl_init();
        __ERC721Burnable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(PAUSER_ROLE, msg.sender);
        //_setupRole(MINTER_ROLE, msg.sender);
        
    }
    
        /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}. BIG QUESTION!!! WHY NOT USING THE REGULAR "TO" INSTEAD OF MSG.SENDER
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function licenseIp() public payable virtual returns (uint256) {
        //change to pull payment
        require(msg.value == licenseCost);
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _tokenIdCounter.increment();
        uint256 id = _tokenIdCounter.current();
        _safeMint(msg.sender, _tokenIdCounter.current());
        return id;
    }
    
    /**
     * @dev Change the licensor and owner of the contract
     * @param newLicensor address of the new licensor
     **/
    function changeLicensor(address newLicensor) public {
        grantRole(DEFAULT_ADMIN_ROLE, newLicensor);
        grantRole(PAUSER_ROLE, newLicensor);

    }

    /**
     * @dev Change cost of License
     * @param newLicenseCost New price for license
     **/
    function changeLicenseCost(uint256 newLicenseCost)
        public
        
        returns (uint256)
    {
        licenseCost = newLicenseCost;
        return licenseCost;
    }

    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }
    
    function _baseURI() internal pure override returns (string memory) {
        return "ipfs://";
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256 tokenId)
        internal
        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)
    {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721Upgradeable, ERC721URIStorageUpgradeable)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721Upgradeable, AccessControlUpgradeable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
    
    // @dev push a new IP to the contract
    function _pushIP(string memory IpURI) public {
        IP.push(IpURI);
    }

        /** @dev disable Transfer of NFT to ensure no secondary market can function */ 
    function transferFrom() public pure {
        revert("Transfer Disabled Buy new License");
    }
    /** @dev disable Transfer of NFT to ensure no secondary market can function */ 
    function safeTransferFrom() public pure {
        revert("Transfer Disabled Buy new License");
    }
} 